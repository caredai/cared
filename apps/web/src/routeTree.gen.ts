/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DocsRouteImport } from './routes/docs'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as AccountRouteRouteImport } from './routes/account/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrgIndexRouteImport } from './routes/org/index'
import { Route as LandingIndexRouteImport } from './routes/landing/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AuthSignUpRouteImport } from './routes/auth/sign-up'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as AuthResetPasswordRouteImport } from './routes/auth/reset-password'
import { Route as AuthForgotPasswordRouteImport } from './routes/auth/forgot-password'
import { Route as AuthErrorRouteImport } from './routes/auth/error'
import { Route as AdminModelsRouteImport } from './routes/admin/models'
import { Route as AdminMockRouteImport } from './routes/admin/mock'
import { Route as AccountTracingRouteImport } from './routes/account/tracing'
import { Route as AccountProfileRouteImport } from './routes/account/profile'
import { Route as AccountPricingRouteImport } from './routes/account/pricing'
import { Route as AccountModelsRouteImport } from './routes/account/models'
import { Route as AccountCreditsRouteImport } from './routes/account/credits'
import { Route as AccountApplicationsRouteImport } from './routes/account/applications'
import { Route as AccountApiKeysRouteImport } from './routes/account/api-keys'
import { Route as WorkspaceWorkspaceIdRouteRouteImport } from './routes/workspace/$workspaceId/route'
import { Route as OrgOrganizationIdRouteRouteImport } from './routes/org/$organizationId/route'
import { Route as AppAppIdRouteRouteImport } from './routes/app/$appId/route'
import { Route as WorkspaceWorkspaceIdIndexRouteImport } from './routes/workspace/$workspaceId/index'
import { Route as OrgOrganizationIdIndexRouteImport } from './routes/org/$organizationId/index'
import { Route as AppAppIdIndexRouteImport } from './routes/app/$appId/index'
import { Route as AdminAppsIndexRouteImport } from './routes/admin/apps/index'
import { Route as AccountWalletIndexRouteImport } from './routes/account/wallet/index'
import { Route as AccountSecurityIndexRouteImport } from './routes/account/security/index'
import { Route as WorkspaceWorkspaceIdTracingRouteImport } from './routes/workspace/$workspaceId/tracing'
import { Route as WorkspaceWorkspaceIdSettingsRouteImport } from './routes/workspace/$workspaceId/settings'
import { Route as WorkspaceWorkspaceIdDatasetsRouteImport } from './routes/workspace/$workspaceId/datasets'
import { Route as WorkspaceWorkspaceIdAppsRouteImport } from './routes/workspace/$workspaceId/apps'
import { Route as WorkspaceWorkspaceIdApiKeysRouteImport } from './routes/workspace/$workspaceId/api-keys'
import { Route as OrgAcceptInvitationInvitationIdRouteImport } from './routes/org/accept-invitation.$invitationId'
import { Route as OrgOrganizationIdWorkspacesRouteImport } from './routes/org/$organizationId/workspaces'
import { Route as OrgOrganizationIdTracingRouteImport } from './routes/org/$organizationId/tracing'
import { Route as OrgOrganizationIdSettingsRouteImport } from './routes/org/$organizationId/settings'
import { Route as OrgOrganizationIdModelsRouteImport } from './routes/org/$organizationId/models'
import { Route as OrgOrganizationIdMembersRouteImport } from './routes/org/$organizationId/members'
import { Route as OrgOrganizationIdCreditsRouteImport } from './routes/org/$organizationId/credits'
import { Route as OrgOrganizationIdApiKeysRouteImport } from './routes/org/$organizationId/api-keys'
import { Route as AuthOauth2ConsentRouteImport } from './routes/auth/oauth2.consent'
import { Route as AppAppIdTracingRouteImport } from './routes/app/$appId/tracing'
import { Route as AdminAppsTagsRouteImport } from './routes/admin/apps/tags'
import { Route as AdminAppsCategoriesRouteImport } from './routes/admin/apps/categories'
import { Route as AccountCreditsUsageRouteImport } from './routes/account/credits_.usage'
import { Route as AppAppIdConfigureRouteRouteImport } from './routes/app/$appId/configure/route'
import { Route as OrgOrganizationIdMembersInvitationsRouteImport } from './routes/org/$organizationId/members_.invitations'
import { Route as OrgOrganizationIdCreditsUsageRouteImport } from './routes/org/$organizationId/credits_.usage'
import { Route as AppAppIdConfigureOauthApplicationRouteImport } from './routes/app/$appId/configure/oauth-application'
import { Route as AppAppIdConfigureApiKeysRouteImport } from './routes/app/$appId/configure/api-keys'

const DocsRoute = DocsRouteImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRouteRoute = AccountRouteRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrgIndexRoute = OrgIndexRouteImport.update({
  id: '/org/',
  path: '/org/',
  getParentRoute: () => rootRouteImport,
} as any)
const LandingIndexRoute = LandingIndexRouteImport.update({
  id: '/landing/',
  path: '/landing/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/auth/sign-up',
  path: '/auth/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/auth/sign-in',
  path: '/auth/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthResetPasswordRoute = AuthResetPasswordRouteImport.update({
  id: '/auth/reset-password',
  path: '/auth/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthForgotPasswordRoute = AuthForgotPasswordRouteImport.update({
  id: '/auth/forgot-password',
  path: '/auth/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthErrorRoute = AuthErrorRouteImport.update({
  id: '/auth/error',
  path: '/auth/error',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminModelsRoute = AdminModelsRouteImport.update({
  id: '/models',
  path: '/models',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminMockRoute = AdminMockRouteImport.update({
  id: '/mock',
  path: '/mock',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AccountTracingRoute = AccountTracingRouteImport.update({
  id: '/tracing',
  path: '/tracing',
  getParentRoute: () => AccountRouteRoute,
} as any)
const AccountProfileRoute = AccountProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AccountRouteRoute,
} as any)
const AccountPricingRoute = AccountPricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => AccountRouteRoute,
} as any)
const AccountModelsRoute = AccountModelsRouteImport.update({
  id: '/models',
  path: '/models',
  getParentRoute: () => AccountRouteRoute,
} as any)
const AccountCreditsRoute = AccountCreditsRouteImport.update({
  id: '/credits',
  path: '/credits',
  getParentRoute: () => AccountRouteRoute,
} as any)
const AccountApplicationsRoute = AccountApplicationsRouteImport.update({
  id: '/applications',
  path: '/applications',
  getParentRoute: () => AccountRouteRoute,
} as any)
const AccountApiKeysRoute = AccountApiKeysRouteImport.update({
  id: '/api-keys',
  path: '/api-keys',
  getParentRoute: () => AccountRouteRoute,
} as any)
const WorkspaceWorkspaceIdRouteRoute =
  WorkspaceWorkspaceIdRouteRouteImport.update({
    id: '/workspace/$workspaceId',
    path: '/workspace/$workspaceId',
    getParentRoute: () => rootRouteImport,
  } as any)
const OrgOrganizationIdRouteRoute = OrgOrganizationIdRouteRouteImport.update({
  id: '/org/$organizationId',
  path: '/org/$organizationId',
  getParentRoute: () => rootRouteImport,
} as any)
const AppAppIdRouteRoute = AppAppIdRouteRouteImport.update({
  id: '/app/$appId',
  path: '/app/$appId',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceWorkspaceIdIndexRoute =
  WorkspaceWorkspaceIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => WorkspaceWorkspaceIdRouteRoute,
  } as any)
const OrgOrganizationIdIndexRoute = OrgOrganizationIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OrgOrganizationIdRouteRoute,
} as any)
const AppAppIdIndexRoute = AppAppIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppAppIdRouteRoute,
} as any)
const AdminAppsIndexRoute = AdminAppsIndexRouteImport.update({
  id: '/apps/',
  path: '/apps/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AccountWalletIndexRoute = AccountWalletIndexRouteImport.update({
  id: '/wallet/',
  path: '/wallet/',
  getParentRoute: () => AccountRouteRoute,
} as any)
const AccountSecurityIndexRoute = AccountSecurityIndexRouteImport.update({
  id: '/security/',
  path: '/security/',
  getParentRoute: () => AccountRouteRoute,
} as any)
const WorkspaceWorkspaceIdTracingRoute =
  WorkspaceWorkspaceIdTracingRouteImport.update({
    id: '/tracing',
    path: '/tracing',
    getParentRoute: () => WorkspaceWorkspaceIdRouteRoute,
  } as any)
const WorkspaceWorkspaceIdSettingsRoute =
  WorkspaceWorkspaceIdSettingsRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => WorkspaceWorkspaceIdRouteRoute,
  } as any)
const WorkspaceWorkspaceIdDatasetsRoute =
  WorkspaceWorkspaceIdDatasetsRouteImport.update({
    id: '/datasets',
    path: '/datasets',
    getParentRoute: () => WorkspaceWorkspaceIdRouteRoute,
  } as any)
const WorkspaceWorkspaceIdAppsRoute =
  WorkspaceWorkspaceIdAppsRouteImport.update({
    id: '/apps',
    path: '/apps',
    getParentRoute: () => WorkspaceWorkspaceIdRouteRoute,
  } as any)
const WorkspaceWorkspaceIdApiKeysRoute =
  WorkspaceWorkspaceIdApiKeysRouteImport.update({
    id: '/api-keys',
    path: '/api-keys',
    getParentRoute: () => WorkspaceWorkspaceIdRouteRoute,
  } as any)
const OrgAcceptInvitationInvitationIdRoute =
  OrgAcceptInvitationInvitationIdRouteImport.update({
    id: '/org/accept-invitation/$invitationId',
    path: '/org/accept-invitation/$invitationId',
    getParentRoute: () => rootRouteImport,
  } as any)
const OrgOrganizationIdWorkspacesRoute =
  OrgOrganizationIdWorkspacesRouteImport.update({
    id: '/workspaces',
    path: '/workspaces',
    getParentRoute: () => OrgOrganizationIdRouteRoute,
  } as any)
const OrgOrganizationIdTracingRoute =
  OrgOrganizationIdTracingRouteImport.update({
    id: '/tracing',
    path: '/tracing',
    getParentRoute: () => OrgOrganizationIdRouteRoute,
  } as any)
const OrgOrganizationIdSettingsRoute =
  OrgOrganizationIdSettingsRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => OrgOrganizationIdRouteRoute,
  } as any)
const OrgOrganizationIdModelsRoute = OrgOrganizationIdModelsRouteImport.update({
  id: '/models',
  path: '/models',
  getParentRoute: () => OrgOrganizationIdRouteRoute,
} as any)
const OrgOrganizationIdMembersRoute =
  OrgOrganizationIdMembersRouteImport.update({
    id: '/members',
    path: '/members',
    getParentRoute: () => OrgOrganizationIdRouteRoute,
  } as any)
const OrgOrganizationIdCreditsRoute =
  OrgOrganizationIdCreditsRouteImport.update({
    id: '/credits',
    path: '/credits',
    getParentRoute: () => OrgOrganizationIdRouteRoute,
  } as any)
const OrgOrganizationIdApiKeysRoute =
  OrgOrganizationIdApiKeysRouteImport.update({
    id: '/api-keys',
    path: '/api-keys',
    getParentRoute: () => OrgOrganizationIdRouteRoute,
  } as any)
const AuthOauth2ConsentRoute = AuthOauth2ConsentRouteImport.update({
  id: '/auth/oauth2/consent',
  path: '/auth/oauth2/consent',
  getParentRoute: () => rootRouteImport,
} as any)
const AppAppIdTracingRoute = AppAppIdTracingRouteImport.update({
  id: '/tracing',
  path: '/tracing',
  getParentRoute: () => AppAppIdRouteRoute,
} as any)
const AdminAppsTagsRoute = AdminAppsTagsRouteImport.update({
  id: '/apps/tags',
  path: '/apps/tags',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminAppsCategoriesRoute = AdminAppsCategoriesRouteImport.update({
  id: '/apps/categories',
  path: '/apps/categories',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AccountCreditsUsageRoute = AccountCreditsUsageRouteImport.update({
  id: '/credits_/usage',
  path: '/credits/usage',
  getParentRoute: () => AccountRouteRoute,
} as any)
const AppAppIdConfigureRouteRoute = AppAppIdConfigureRouteRouteImport.update({
  id: '/configure',
  path: '/configure',
  getParentRoute: () => AppAppIdRouteRoute,
} as any)
const OrgOrganizationIdMembersInvitationsRoute =
  OrgOrganizationIdMembersInvitationsRouteImport.update({
    id: '/members_/invitations',
    path: '/members/invitations',
    getParentRoute: () => OrgOrganizationIdRouteRoute,
  } as any)
const OrgOrganizationIdCreditsUsageRoute =
  OrgOrganizationIdCreditsUsageRouteImport.update({
    id: '/credits_/usage',
    path: '/credits/usage',
    getParentRoute: () => OrgOrganizationIdRouteRoute,
  } as any)
const AppAppIdConfigureOauthApplicationRoute =
  AppAppIdConfigureOauthApplicationRouteImport.update({
    id: '/oauth-application',
    path: '/oauth-application',
    getParentRoute: () => AppAppIdConfigureRouteRoute,
  } as any)
const AppAppIdConfigureApiKeysRoute =
  AppAppIdConfigureApiKeysRouteImport.update({
    id: '/api-keys',
    path: '/api-keys',
    getParentRoute: () => AppAppIdConfigureRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/docs': typeof DocsRoute
  '/app/$appId': typeof AppAppIdRouteRouteWithChildren
  '/org/$organizationId': typeof OrgOrganizationIdRouteRouteWithChildren
  '/workspace/$workspaceId': typeof WorkspaceWorkspaceIdRouteRouteWithChildren
  '/account/api-keys': typeof AccountApiKeysRoute
  '/account/applications': typeof AccountApplicationsRoute
  '/account/credits': typeof AccountCreditsRoute
  '/account/models': typeof AccountModelsRoute
  '/account/pricing': typeof AccountPricingRoute
  '/account/profile': typeof AccountProfileRoute
  '/account/tracing': typeof AccountTracingRoute
  '/admin/mock': typeof AdminMockRoute
  '/admin/models': typeof AdminModelsRoute
  '/auth/error': typeof AuthErrorRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/admin/': typeof AdminIndexRoute
  '/landing': typeof LandingIndexRoute
  '/org': typeof OrgIndexRoute
  '/app/$appId/configure': typeof AppAppIdConfigureRouteRouteWithChildren
  '/account/credits/usage': typeof AccountCreditsUsageRoute
  '/admin/apps/categories': typeof AdminAppsCategoriesRoute
  '/admin/apps/tags': typeof AdminAppsTagsRoute
  '/app/$appId/tracing': typeof AppAppIdTracingRoute
  '/auth/oauth2/consent': typeof AuthOauth2ConsentRoute
  '/org/$organizationId/api-keys': typeof OrgOrganizationIdApiKeysRoute
  '/org/$organizationId/credits': typeof OrgOrganizationIdCreditsRoute
  '/org/$organizationId/members': typeof OrgOrganizationIdMembersRoute
  '/org/$organizationId/models': typeof OrgOrganizationIdModelsRoute
  '/org/$organizationId/settings': typeof OrgOrganizationIdSettingsRoute
  '/org/$organizationId/tracing': typeof OrgOrganizationIdTracingRoute
  '/org/$organizationId/workspaces': typeof OrgOrganizationIdWorkspacesRoute
  '/org/accept-invitation/$invitationId': typeof OrgAcceptInvitationInvitationIdRoute
  '/workspace/$workspaceId/api-keys': typeof WorkspaceWorkspaceIdApiKeysRoute
  '/workspace/$workspaceId/apps': typeof WorkspaceWorkspaceIdAppsRoute
  '/workspace/$workspaceId/datasets': typeof WorkspaceWorkspaceIdDatasetsRoute
  '/workspace/$workspaceId/settings': typeof WorkspaceWorkspaceIdSettingsRoute
  '/workspace/$workspaceId/tracing': typeof WorkspaceWorkspaceIdTracingRoute
  '/account/security': typeof AccountSecurityIndexRoute
  '/account/wallet': typeof AccountWalletIndexRoute
  '/admin/apps': typeof AdminAppsIndexRoute
  '/app/$appId/': typeof AppAppIdIndexRoute
  '/org/$organizationId/': typeof OrgOrganizationIdIndexRoute
  '/workspace/$workspaceId/': typeof WorkspaceWorkspaceIdIndexRoute
  '/app/$appId/configure/api-keys': typeof AppAppIdConfigureApiKeysRoute
  '/app/$appId/configure/oauth-application': typeof AppAppIdConfigureOauthApplicationRoute
  '/org/$organizationId/credits/usage': typeof OrgOrganizationIdCreditsUsageRoute
  '/org/$organizationId/members/invitations': typeof OrgOrganizationIdMembersInvitationsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof AccountRouteRouteWithChildren
  '/docs': typeof DocsRoute
  '/account/api-keys': typeof AccountApiKeysRoute
  '/account/applications': typeof AccountApplicationsRoute
  '/account/credits': typeof AccountCreditsRoute
  '/account/models': typeof AccountModelsRoute
  '/account/pricing': typeof AccountPricingRoute
  '/account/profile': typeof AccountProfileRoute
  '/account/tracing': typeof AccountTracingRoute
  '/admin/mock': typeof AdminMockRoute
  '/admin/models': typeof AdminModelsRoute
  '/auth/error': typeof AuthErrorRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/admin': typeof AdminIndexRoute
  '/landing': typeof LandingIndexRoute
  '/org': typeof OrgIndexRoute
  '/app/$appId/configure': typeof AppAppIdConfigureRouteRouteWithChildren
  '/account/credits/usage': typeof AccountCreditsUsageRoute
  '/admin/apps/categories': typeof AdminAppsCategoriesRoute
  '/admin/apps/tags': typeof AdminAppsTagsRoute
  '/app/$appId/tracing': typeof AppAppIdTracingRoute
  '/auth/oauth2/consent': typeof AuthOauth2ConsentRoute
  '/org/$organizationId/api-keys': typeof OrgOrganizationIdApiKeysRoute
  '/org/$organizationId/credits': typeof OrgOrganizationIdCreditsRoute
  '/org/$organizationId/members': typeof OrgOrganizationIdMembersRoute
  '/org/$organizationId/models': typeof OrgOrganizationIdModelsRoute
  '/org/$organizationId/settings': typeof OrgOrganizationIdSettingsRoute
  '/org/$organizationId/tracing': typeof OrgOrganizationIdTracingRoute
  '/org/$organizationId/workspaces': typeof OrgOrganizationIdWorkspacesRoute
  '/org/accept-invitation/$invitationId': typeof OrgAcceptInvitationInvitationIdRoute
  '/workspace/$workspaceId/api-keys': typeof WorkspaceWorkspaceIdApiKeysRoute
  '/workspace/$workspaceId/apps': typeof WorkspaceWorkspaceIdAppsRoute
  '/workspace/$workspaceId/datasets': typeof WorkspaceWorkspaceIdDatasetsRoute
  '/workspace/$workspaceId/settings': typeof WorkspaceWorkspaceIdSettingsRoute
  '/workspace/$workspaceId/tracing': typeof WorkspaceWorkspaceIdTracingRoute
  '/account/security': typeof AccountSecurityIndexRoute
  '/account/wallet': typeof AccountWalletIndexRoute
  '/admin/apps': typeof AdminAppsIndexRoute
  '/app/$appId': typeof AppAppIdIndexRoute
  '/org/$organizationId': typeof OrgOrganizationIdIndexRoute
  '/workspace/$workspaceId': typeof WorkspaceWorkspaceIdIndexRoute
  '/app/$appId/configure/api-keys': typeof AppAppIdConfigureApiKeysRoute
  '/app/$appId/configure/oauth-application': typeof AppAppIdConfigureOauthApplicationRoute
  '/org/$organizationId/credits/usage': typeof OrgOrganizationIdCreditsUsageRoute
  '/org/$organizationId/members/invitations': typeof OrgOrganizationIdMembersInvitationsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/account': typeof AccountRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/docs': typeof DocsRoute
  '/app/$appId': typeof AppAppIdRouteRouteWithChildren
  '/org/$organizationId': typeof OrgOrganizationIdRouteRouteWithChildren
  '/workspace/$workspaceId': typeof WorkspaceWorkspaceIdRouteRouteWithChildren
  '/account/api-keys': typeof AccountApiKeysRoute
  '/account/applications': typeof AccountApplicationsRoute
  '/account/credits': typeof AccountCreditsRoute
  '/account/models': typeof AccountModelsRoute
  '/account/pricing': typeof AccountPricingRoute
  '/account/profile': typeof AccountProfileRoute
  '/account/tracing': typeof AccountTracingRoute
  '/admin/mock': typeof AdminMockRoute
  '/admin/models': typeof AdminModelsRoute
  '/auth/error': typeof AuthErrorRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/admin/': typeof AdminIndexRoute
  '/landing/': typeof LandingIndexRoute
  '/org/': typeof OrgIndexRoute
  '/app/$appId/configure': typeof AppAppIdConfigureRouteRouteWithChildren
  '/account/credits_/usage': typeof AccountCreditsUsageRoute
  '/admin/apps/categories': typeof AdminAppsCategoriesRoute
  '/admin/apps/tags': typeof AdminAppsTagsRoute
  '/app/$appId/tracing': typeof AppAppIdTracingRoute
  '/auth/oauth2/consent': typeof AuthOauth2ConsentRoute
  '/org/$organizationId/api-keys': typeof OrgOrganizationIdApiKeysRoute
  '/org/$organizationId/credits': typeof OrgOrganizationIdCreditsRoute
  '/org/$organizationId/members': typeof OrgOrganizationIdMembersRoute
  '/org/$organizationId/models': typeof OrgOrganizationIdModelsRoute
  '/org/$organizationId/settings': typeof OrgOrganizationIdSettingsRoute
  '/org/$organizationId/tracing': typeof OrgOrganizationIdTracingRoute
  '/org/$organizationId/workspaces': typeof OrgOrganizationIdWorkspacesRoute
  '/org/accept-invitation/$invitationId': typeof OrgAcceptInvitationInvitationIdRoute
  '/workspace/$workspaceId/api-keys': typeof WorkspaceWorkspaceIdApiKeysRoute
  '/workspace/$workspaceId/apps': typeof WorkspaceWorkspaceIdAppsRoute
  '/workspace/$workspaceId/datasets': typeof WorkspaceWorkspaceIdDatasetsRoute
  '/workspace/$workspaceId/settings': typeof WorkspaceWorkspaceIdSettingsRoute
  '/workspace/$workspaceId/tracing': typeof WorkspaceWorkspaceIdTracingRoute
  '/account/security/': typeof AccountSecurityIndexRoute
  '/account/wallet/': typeof AccountWalletIndexRoute
  '/admin/apps/': typeof AdminAppsIndexRoute
  '/app/$appId/': typeof AppAppIdIndexRoute
  '/org/$organizationId/': typeof OrgOrganizationIdIndexRoute
  '/workspace/$workspaceId/': typeof WorkspaceWorkspaceIdIndexRoute
  '/app/$appId/configure/api-keys': typeof AppAppIdConfigureApiKeysRoute
  '/app/$appId/configure/oauth-application': typeof AppAppIdConfigureOauthApplicationRoute
  '/org/$organizationId/credits_/usage': typeof OrgOrganizationIdCreditsUsageRoute
  '/org/$organizationId/members_/invitations': typeof OrgOrganizationIdMembersInvitationsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/admin'
    | '/docs'
    | '/app/$appId'
    | '/org/$organizationId'
    | '/workspace/$workspaceId'
    | '/account/api-keys'
    | '/account/applications'
    | '/account/credits'
    | '/account/models'
    | '/account/pricing'
    | '/account/profile'
    | '/account/tracing'
    | '/admin/mock'
    | '/admin/models'
    | '/auth/error'
    | '/auth/forgot-password'
    | '/auth/reset-password'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/admin/'
    | '/landing'
    | '/org'
    | '/app/$appId/configure'
    | '/account/credits/usage'
    | '/admin/apps/categories'
    | '/admin/apps/tags'
    | '/app/$appId/tracing'
    | '/auth/oauth2/consent'
    | '/org/$organizationId/api-keys'
    | '/org/$organizationId/credits'
    | '/org/$organizationId/members'
    | '/org/$organizationId/models'
    | '/org/$organizationId/settings'
    | '/org/$organizationId/tracing'
    | '/org/$organizationId/workspaces'
    | '/org/accept-invitation/$invitationId'
    | '/workspace/$workspaceId/api-keys'
    | '/workspace/$workspaceId/apps'
    | '/workspace/$workspaceId/datasets'
    | '/workspace/$workspaceId/settings'
    | '/workspace/$workspaceId/tracing'
    | '/account/security'
    | '/account/wallet'
    | '/admin/apps'
    | '/app/$appId/'
    | '/org/$organizationId/'
    | '/workspace/$workspaceId/'
    | '/app/$appId/configure/api-keys'
    | '/app/$appId/configure/oauth-application'
    | '/org/$organizationId/credits/usage'
    | '/org/$organizationId/members/invitations'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account'
    | '/docs'
    | '/account/api-keys'
    | '/account/applications'
    | '/account/credits'
    | '/account/models'
    | '/account/pricing'
    | '/account/profile'
    | '/account/tracing'
    | '/admin/mock'
    | '/admin/models'
    | '/auth/error'
    | '/auth/forgot-password'
    | '/auth/reset-password'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/admin'
    | '/landing'
    | '/org'
    | '/app/$appId/configure'
    | '/account/credits/usage'
    | '/admin/apps/categories'
    | '/admin/apps/tags'
    | '/app/$appId/tracing'
    | '/auth/oauth2/consent'
    | '/org/$organizationId/api-keys'
    | '/org/$organizationId/credits'
    | '/org/$organizationId/members'
    | '/org/$organizationId/models'
    | '/org/$organizationId/settings'
    | '/org/$organizationId/tracing'
    | '/org/$organizationId/workspaces'
    | '/org/accept-invitation/$invitationId'
    | '/workspace/$workspaceId/api-keys'
    | '/workspace/$workspaceId/apps'
    | '/workspace/$workspaceId/datasets'
    | '/workspace/$workspaceId/settings'
    | '/workspace/$workspaceId/tracing'
    | '/account/security'
    | '/account/wallet'
    | '/admin/apps'
    | '/app/$appId'
    | '/org/$organizationId'
    | '/workspace/$workspaceId'
    | '/app/$appId/configure/api-keys'
    | '/app/$appId/configure/oauth-application'
    | '/org/$organizationId/credits/usage'
    | '/org/$organizationId/members/invitations'
  id:
    | '__root__'
    | '/'
    | '/account'
    | '/admin'
    | '/docs'
    | '/app/$appId'
    | '/org/$organizationId'
    | '/workspace/$workspaceId'
    | '/account/api-keys'
    | '/account/applications'
    | '/account/credits'
    | '/account/models'
    | '/account/pricing'
    | '/account/profile'
    | '/account/tracing'
    | '/admin/mock'
    | '/admin/models'
    | '/auth/error'
    | '/auth/forgot-password'
    | '/auth/reset-password'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/admin/'
    | '/landing/'
    | '/org/'
    | '/app/$appId/configure'
    | '/account/credits_/usage'
    | '/admin/apps/categories'
    | '/admin/apps/tags'
    | '/app/$appId/tracing'
    | '/auth/oauth2/consent'
    | '/org/$organizationId/api-keys'
    | '/org/$organizationId/credits'
    | '/org/$organizationId/members'
    | '/org/$organizationId/models'
    | '/org/$organizationId/settings'
    | '/org/$organizationId/tracing'
    | '/org/$organizationId/workspaces'
    | '/org/accept-invitation/$invitationId'
    | '/workspace/$workspaceId/api-keys'
    | '/workspace/$workspaceId/apps'
    | '/workspace/$workspaceId/datasets'
    | '/workspace/$workspaceId/settings'
    | '/workspace/$workspaceId/tracing'
    | '/account/security/'
    | '/account/wallet/'
    | '/admin/apps/'
    | '/app/$appId/'
    | '/org/$organizationId/'
    | '/workspace/$workspaceId/'
    | '/app/$appId/configure/api-keys'
    | '/app/$appId/configure/oauth-application'
    | '/org/$organizationId/credits_/usage'
    | '/org/$organizationId/members_/invitations'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRouteRoute: typeof AccountRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  DocsRoute: typeof DocsRoute
  AppAppIdRouteRoute: typeof AppAppIdRouteRouteWithChildren
  OrgOrganizationIdRouteRoute: typeof OrgOrganizationIdRouteRouteWithChildren
  WorkspaceWorkspaceIdRouteRoute: typeof WorkspaceWorkspaceIdRouteRouteWithChildren
  AuthErrorRoute: typeof AuthErrorRoute
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
  LandingIndexRoute: typeof LandingIndexRoute
  OrgIndexRoute: typeof OrgIndexRoute
  AuthOauth2ConsentRoute: typeof AuthOauth2ConsentRoute
  OrgAcceptInvitationInvitationIdRoute: typeof OrgAcceptInvitationInvitationIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/org/': {
      id: '/org/'
      path: '/org'
      fullPath: '/org'
      preLoaderRoute: typeof OrgIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/landing/': {
      id: '/landing/'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof LandingIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/auth/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/auth/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/reset-password': {
      id: '/auth/reset-password'
      path: '/auth/reset-password'
      fullPath: '/auth/reset-password'
      preLoaderRoute: typeof AuthResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/auth/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/error': {
      id: '/auth/error'
      path: '/auth/error'
      fullPath: '/auth/error'
      preLoaderRoute: typeof AuthErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/models': {
      id: '/admin/models'
      path: '/models'
      fullPath: '/admin/models'
      preLoaderRoute: typeof AdminModelsRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/mock': {
      id: '/admin/mock'
      path: '/mock'
      fullPath: '/admin/mock'
      preLoaderRoute: typeof AdminMockRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/account/tracing': {
      id: '/account/tracing'
      path: '/tracing'
      fullPath: '/account/tracing'
      preLoaderRoute: typeof AccountTracingRouteImport
      parentRoute: typeof AccountRouteRoute
    }
    '/account/profile': {
      id: '/account/profile'
      path: '/profile'
      fullPath: '/account/profile'
      preLoaderRoute: typeof AccountProfileRouteImport
      parentRoute: typeof AccountRouteRoute
    }
    '/account/pricing': {
      id: '/account/pricing'
      path: '/pricing'
      fullPath: '/account/pricing'
      preLoaderRoute: typeof AccountPricingRouteImport
      parentRoute: typeof AccountRouteRoute
    }
    '/account/models': {
      id: '/account/models'
      path: '/models'
      fullPath: '/account/models'
      preLoaderRoute: typeof AccountModelsRouteImport
      parentRoute: typeof AccountRouteRoute
    }
    '/account/credits': {
      id: '/account/credits'
      path: '/credits'
      fullPath: '/account/credits'
      preLoaderRoute: typeof AccountCreditsRouteImport
      parentRoute: typeof AccountRouteRoute
    }
    '/account/applications': {
      id: '/account/applications'
      path: '/applications'
      fullPath: '/account/applications'
      preLoaderRoute: typeof AccountApplicationsRouteImport
      parentRoute: typeof AccountRouteRoute
    }
    '/account/api-keys': {
      id: '/account/api-keys'
      path: '/api-keys'
      fullPath: '/account/api-keys'
      preLoaderRoute: typeof AccountApiKeysRouteImport
      parentRoute: typeof AccountRouteRoute
    }
    '/workspace/$workspaceId': {
      id: '/workspace/$workspaceId'
      path: '/workspace/$workspaceId'
      fullPath: '/workspace/$workspaceId'
      preLoaderRoute: typeof WorkspaceWorkspaceIdRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/org/$organizationId': {
      id: '/org/$organizationId'
      path: '/org/$organizationId'
      fullPath: '/org/$organizationId'
      preLoaderRoute: typeof OrgOrganizationIdRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/$appId': {
      id: '/app/$appId'
      path: '/app/$appId'
      fullPath: '/app/$appId'
      preLoaderRoute: typeof AppAppIdRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/$workspaceId/': {
      id: '/workspace/$workspaceId/'
      path: '/'
      fullPath: '/workspace/$workspaceId/'
      preLoaderRoute: typeof WorkspaceWorkspaceIdIndexRouteImport
      parentRoute: typeof WorkspaceWorkspaceIdRouteRoute
    }
    '/org/$organizationId/': {
      id: '/org/$organizationId/'
      path: '/'
      fullPath: '/org/$organizationId/'
      preLoaderRoute: typeof OrgOrganizationIdIndexRouteImport
      parentRoute: typeof OrgOrganizationIdRouteRoute
    }
    '/app/$appId/': {
      id: '/app/$appId/'
      path: '/'
      fullPath: '/app/$appId/'
      preLoaderRoute: typeof AppAppIdIndexRouteImport
      parentRoute: typeof AppAppIdRouteRoute
    }
    '/admin/apps/': {
      id: '/admin/apps/'
      path: '/apps'
      fullPath: '/admin/apps'
      preLoaderRoute: typeof AdminAppsIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/account/wallet/': {
      id: '/account/wallet/'
      path: '/wallet'
      fullPath: '/account/wallet'
      preLoaderRoute: typeof AccountWalletIndexRouteImport
      parentRoute: typeof AccountRouteRoute
    }
    '/account/security/': {
      id: '/account/security/'
      path: '/security'
      fullPath: '/account/security'
      preLoaderRoute: typeof AccountSecurityIndexRouteImport
      parentRoute: typeof AccountRouteRoute
    }
    '/workspace/$workspaceId/tracing': {
      id: '/workspace/$workspaceId/tracing'
      path: '/tracing'
      fullPath: '/workspace/$workspaceId/tracing'
      preLoaderRoute: typeof WorkspaceWorkspaceIdTracingRouteImport
      parentRoute: typeof WorkspaceWorkspaceIdRouteRoute
    }
    '/workspace/$workspaceId/settings': {
      id: '/workspace/$workspaceId/settings'
      path: '/settings'
      fullPath: '/workspace/$workspaceId/settings'
      preLoaderRoute: typeof WorkspaceWorkspaceIdSettingsRouteImport
      parentRoute: typeof WorkspaceWorkspaceIdRouteRoute
    }
    '/workspace/$workspaceId/datasets': {
      id: '/workspace/$workspaceId/datasets'
      path: '/datasets'
      fullPath: '/workspace/$workspaceId/datasets'
      preLoaderRoute: typeof WorkspaceWorkspaceIdDatasetsRouteImport
      parentRoute: typeof WorkspaceWorkspaceIdRouteRoute
    }
    '/workspace/$workspaceId/apps': {
      id: '/workspace/$workspaceId/apps'
      path: '/apps'
      fullPath: '/workspace/$workspaceId/apps'
      preLoaderRoute: typeof WorkspaceWorkspaceIdAppsRouteImport
      parentRoute: typeof WorkspaceWorkspaceIdRouteRoute
    }
    '/workspace/$workspaceId/api-keys': {
      id: '/workspace/$workspaceId/api-keys'
      path: '/api-keys'
      fullPath: '/workspace/$workspaceId/api-keys'
      preLoaderRoute: typeof WorkspaceWorkspaceIdApiKeysRouteImport
      parentRoute: typeof WorkspaceWorkspaceIdRouteRoute
    }
    '/org/accept-invitation/$invitationId': {
      id: '/org/accept-invitation/$invitationId'
      path: '/org/accept-invitation/$invitationId'
      fullPath: '/org/accept-invitation/$invitationId'
      preLoaderRoute: typeof OrgAcceptInvitationInvitationIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/org/$organizationId/workspaces': {
      id: '/org/$organizationId/workspaces'
      path: '/workspaces'
      fullPath: '/org/$organizationId/workspaces'
      preLoaderRoute: typeof OrgOrganizationIdWorkspacesRouteImport
      parentRoute: typeof OrgOrganizationIdRouteRoute
    }
    '/org/$organizationId/tracing': {
      id: '/org/$organizationId/tracing'
      path: '/tracing'
      fullPath: '/org/$organizationId/tracing'
      preLoaderRoute: typeof OrgOrganizationIdTracingRouteImport
      parentRoute: typeof OrgOrganizationIdRouteRoute
    }
    '/org/$organizationId/settings': {
      id: '/org/$organizationId/settings'
      path: '/settings'
      fullPath: '/org/$organizationId/settings'
      preLoaderRoute: typeof OrgOrganizationIdSettingsRouteImport
      parentRoute: typeof OrgOrganizationIdRouteRoute
    }
    '/org/$organizationId/models': {
      id: '/org/$organizationId/models'
      path: '/models'
      fullPath: '/org/$organizationId/models'
      preLoaderRoute: typeof OrgOrganizationIdModelsRouteImport
      parentRoute: typeof OrgOrganizationIdRouteRoute
    }
    '/org/$organizationId/members': {
      id: '/org/$organizationId/members'
      path: '/members'
      fullPath: '/org/$organizationId/members'
      preLoaderRoute: typeof OrgOrganizationIdMembersRouteImport
      parentRoute: typeof OrgOrganizationIdRouteRoute
    }
    '/org/$organizationId/credits': {
      id: '/org/$organizationId/credits'
      path: '/credits'
      fullPath: '/org/$organizationId/credits'
      preLoaderRoute: typeof OrgOrganizationIdCreditsRouteImport
      parentRoute: typeof OrgOrganizationIdRouteRoute
    }
    '/org/$organizationId/api-keys': {
      id: '/org/$organizationId/api-keys'
      path: '/api-keys'
      fullPath: '/org/$organizationId/api-keys'
      preLoaderRoute: typeof OrgOrganizationIdApiKeysRouteImport
      parentRoute: typeof OrgOrganizationIdRouteRoute
    }
    '/auth/oauth2/consent': {
      id: '/auth/oauth2/consent'
      path: '/auth/oauth2/consent'
      fullPath: '/auth/oauth2/consent'
      preLoaderRoute: typeof AuthOauth2ConsentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/$appId/tracing': {
      id: '/app/$appId/tracing'
      path: '/tracing'
      fullPath: '/app/$appId/tracing'
      preLoaderRoute: typeof AppAppIdTracingRouteImport
      parentRoute: typeof AppAppIdRouteRoute
    }
    '/admin/apps/tags': {
      id: '/admin/apps/tags'
      path: '/apps/tags'
      fullPath: '/admin/apps/tags'
      preLoaderRoute: typeof AdminAppsTagsRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/apps/categories': {
      id: '/admin/apps/categories'
      path: '/apps/categories'
      fullPath: '/admin/apps/categories'
      preLoaderRoute: typeof AdminAppsCategoriesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/account/credits_/usage': {
      id: '/account/credits_/usage'
      path: '/credits/usage'
      fullPath: '/account/credits/usage'
      preLoaderRoute: typeof AccountCreditsUsageRouteImport
      parentRoute: typeof AccountRouteRoute
    }
    '/app/$appId/configure': {
      id: '/app/$appId/configure'
      path: '/configure'
      fullPath: '/app/$appId/configure'
      preLoaderRoute: typeof AppAppIdConfigureRouteRouteImport
      parentRoute: typeof AppAppIdRouteRoute
    }
    '/org/$organizationId/members_/invitations': {
      id: '/org/$organizationId/members_/invitations'
      path: '/members/invitations'
      fullPath: '/org/$organizationId/members/invitations'
      preLoaderRoute: typeof OrgOrganizationIdMembersInvitationsRouteImport
      parentRoute: typeof OrgOrganizationIdRouteRoute
    }
    '/org/$organizationId/credits_/usage': {
      id: '/org/$organizationId/credits_/usage'
      path: '/credits/usage'
      fullPath: '/org/$organizationId/credits/usage'
      preLoaderRoute: typeof OrgOrganizationIdCreditsUsageRouteImport
      parentRoute: typeof OrgOrganizationIdRouteRoute
    }
    '/app/$appId/configure/oauth-application': {
      id: '/app/$appId/configure/oauth-application'
      path: '/oauth-application'
      fullPath: '/app/$appId/configure/oauth-application'
      preLoaderRoute: typeof AppAppIdConfigureOauthApplicationRouteImport
      parentRoute: typeof AppAppIdConfigureRouteRoute
    }
    '/app/$appId/configure/api-keys': {
      id: '/app/$appId/configure/api-keys'
      path: '/api-keys'
      fullPath: '/app/$appId/configure/api-keys'
      preLoaderRoute: typeof AppAppIdConfigureApiKeysRouteImport
      parentRoute: typeof AppAppIdConfigureRouteRoute
    }
  }
}

interface AccountRouteRouteChildren {
  AccountApiKeysRoute: typeof AccountApiKeysRoute
  AccountApplicationsRoute: typeof AccountApplicationsRoute
  AccountCreditsRoute: typeof AccountCreditsRoute
  AccountModelsRoute: typeof AccountModelsRoute
  AccountPricingRoute: typeof AccountPricingRoute
  AccountProfileRoute: typeof AccountProfileRoute
  AccountTracingRoute: typeof AccountTracingRoute
  AccountCreditsUsageRoute: typeof AccountCreditsUsageRoute
  AccountSecurityIndexRoute: typeof AccountSecurityIndexRoute
  AccountWalletIndexRoute: typeof AccountWalletIndexRoute
}

const AccountRouteRouteChildren: AccountRouteRouteChildren = {
  AccountApiKeysRoute: AccountApiKeysRoute,
  AccountApplicationsRoute: AccountApplicationsRoute,
  AccountCreditsRoute: AccountCreditsRoute,
  AccountModelsRoute: AccountModelsRoute,
  AccountPricingRoute: AccountPricingRoute,
  AccountProfileRoute: AccountProfileRoute,
  AccountTracingRoute: AccountTracingRoute,
  AccountCreditsUsageRoute: AccountCreditsUsageRoute,
  AccountSecurityIndexRoute: AccountSecurityIndexRoute,
  AccountWalletIndexRoute: AccountWalletIndexRoute,
}

const AccountRouteRouteWithChildren = AccountRouteRoute._addFileChildren(
  AccountRouteRouteChildren,
)

interface AdminRouteRouteChildren {
  AdminMockRoute: typeof AdminMockRoute
  AdminModelsRoute: typeof AdminModelsRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminAppsCategoriesRoute: typeof AdminAppsCategoriesRoute
  AdminAppsTagsRoute: typeof AdminAppsTagsRoute
  AdminAppsIndexRoute: typeof AdminAppsIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminMockRoute: AdminMockRoute,
  AdminModelsRoute: AdminModelsRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminAppsCategoriesRoute: AdminAppsCategoriesRoute,
  AdminAppsTagsRoute: AdminAppsTagsRoute,
  AdminAppsIndexRoute: AdminAppsIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface AppAppIdConfigureRouteRouteChildren {
  AppAppIdConfigureApiKeysRoute: typeof AppAppIdConfigureApiKeysRoute
  AppAppIdConfigureOauthApplicationRoute: typeof AppAppIdConfigureOauthApplicationRoute
}

const AppAppIdConfigureRouteRouteChildren: AppAppIdConfigureRouteRouteChildren =
  {
    AppAppIdConfigureApiKeysRoute: AppAppIdConfigureApiKeysRoute,
    AppAppIdConfigureOauthApplicationRoute:
      AppAppIdConfigureOauthApplicationRoute,
  }

const AppAppIdConfigureRouteRouteWithChildren =
  AppAppIdConfigureRouteRoute._addFileChildren(
    AppAppIdConfigureRouteRouteChildren,
  )

interface AppAppIdRouteRouteChildren {
  AppAppIdConfigureRouteRoute: typeof AppAppIdConfigureRouteRouteWithChildren
  AppAppIdTracingRoute: typeof AppAppIdTracingRoute
  AppAppIdIndexRoute: typeof AppAppIdIndexRoute
}

const AppAppIdRouteRouteChildren: AppAppIdRouteRouteChildren = {
  AppAppIdConfigureRouteRoute: AppAppIdConfigureRouteRouteWithChildren,
  AppAppIdTracingRoute: AppAppIdTracingRoute,
  AppAppIdIndexRoute: AppAppIdIndexRoute,
}

const AppAppIdRouteRouteWithChildren = AppAppIdRouteRoute._addFileChildren(
  AppAppIdRouteRouteChildren,
)

interface OrgOrganizationIdRouteRouteChildren {
  OrgOrganizationIdApiKeysRoute: typeof OrgOrganizationIdApiKeysRoute
  OrgOrganizationIdCreditsRoute: typeof OrgOrganizationIdCreditsRoute
  OrgOrganizationIdMembersRoute: typeof OrgOrganizationIdMembersRoute
  OrgOrganizationIdModelsRoute: typeof OrgOrganizationIdModelsRoute
  OrgOrganizationIdSettingsRoute: typeof OrgOrganizationIdSettingsRoute
  OrgOrganizationIdTracingRoute: typeof OrgOrganizationIdTracingRoute
  OrgOrganizationIdWorkspacesRoute: typeof OrgOrganizationIdWorkspacesRoute
  OrgOrganizationIdIndexRoute: typeof OrgOrganizationIdIndexRoute
  OrgOrganizationIdCreditsUsageRoute: typeof OrgOrganizationIdCreditsUsageRoute
  OrgOrganizationIdMembersInvitationsRoute: typeof OrgOrganizationIdMembersInvitationsRoute
}

const OrgOrganizationIdRouteRouteChildren: OrgOrganizationIdRouteRouteChildren =
  {
    OrgOrganizationIdApiKeysRoute: OrgOrganizationIdApiKeysRoute,
    OrgOrganizationIdCreditsRoute: OrgOrganizationIdCreditsRoute,
    OrgOrganizationIdMembersRoute: OrgOrganizationIdMembersRoute,
    OrgOrganizationIdModelsRoute: OrgOrganizationIdModelsRoute,
    OrgOrganizationIdSettingsRoute: OrgOrganizationIdSettingsRoute,
    OrgOrganizationIdTracingRoute: OrgOrganizationIdTracingRoute,
    OrgOrganizationIdWorkspacesRoute: OrgOrganizationIdWorkspacesRoute,
    OrgOrganizationIdIndexRoute: OrgOrganizationIdIndexRoute,
    OrgOrganizationIdCreditsUsageRoute: OrgOrganizationIdCreditsUsageRoute,
    OrgOrganizationIdMembersInvitationsRoute:
      OrgOrganizationIdMembersInvitationsRoute,
  }

const OrgOrganizationIdRouteRouteWithChildren =
  OrgOrganizationIdRouteRoute._addFileChildren(
    OrgOrganizationIdRouteRouteChildren,
  )

interface WorkspaceWorkspaceIdRouteRouteChildren {
  WorkspaceWorkspaceIdApiKeysRoute: typeof WorkspaceWorkspaceIdApiKeysRoute
  WorkspaceWorkspaceIdAppsRoute: typeof WorkspaceWorkspaceIdAppsRoute
  WorkspaceWorkspaceIdDatasetsRoute: typeof WorkspaceWorkspaceIdDatasetsRoute
  WorkspaceWorkspaceIdSettingsRoute: typeof WorkspaceWorkspaceIdSettingsRoute
  WorkspaceWorkspaceIdTracingRoute: typeof WorkspaceWorkspaceIdTracingRoute
  WorkspaceWorkspaceIdIndexRoute: typeof WorkspaceWorkspaceIdIndexRoute
}

const WorkspaceWorkspaceIdRouteRouteChildren: WorkspaceWorkspaceIdRouteRouteChildren =
  {
    WorkspaceWorkspaceIdApiKeysRoute: WorkspaceWorkspaceIdApiKeysRoute,
    WorkspaceWorkspaceIdAppsRoute: WorkspaceWorkspaceIdAppsRoute,
    WorkspaceWorkspaceIdDatasetsRoute: WorkspaceWorkspaceIdDatasetsRoute,
    WorkspaceWorkspaceIdSettingsRoute: WorkspaceWorkspaceIdSettingsRoute,
    WorkspaceWorkspaceIdTracingRoute: WorkspaceWorkspaceIdTracingRoute,
    WorkspaceWorkspaceIdIndexRoute: WorkspaceWorkspaceIdIndexRoute,
  }

const WorkspaceWorkspaceIdRouteRouteWithChildren =
  WorkspaceWorkspaceIdRouteRoute._addFileChildren(
    WorkspaceWorkspaceIdRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRouteRoute: AccountRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  DocsRoute: DocsRoute,
  AppAppIdRouteRoute: AppAppIdRouteRouteWithChildren,
  OrgOrganizationIdRouteRoute: OrgOrganizationIdRouteRouteWithChildren,
  WorkspaceWorkspaceIdRouteRoute: WorkspaceWorkspaceIdRouteRouteWithChildren,
  AuthErrorRoute: AuthErrorRoute,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
  LandingIndexRoute: LandingIndexRoute,
  OrgIndexRoute: OrgIndexRoute,
  AuthOauth2ConsentRoute: AuthOauth2ConsentRoute,
  OrgAcceptInvitationInvitationIdRoute: OrgAcceptInvitationInvitationIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
